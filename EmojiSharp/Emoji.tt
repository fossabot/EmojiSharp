<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\packages\Newtonsoft.Json.7.0.1\lib\net45\Newtonsoft.Json.dll" #>

<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ template hostspecific="true" language="C#" #>

/*
	EmojiSharp v0.1
	Created by John Mazouri - http://jmazouri.com/
	emoji.json from the awesome emoji-data project - https://github.com/iamcal/emoji-data

	This file should have been autogenerated from a T4 template - feel free to delete the
	template if you're never going to need to update the emoji list later on.
*/
using System;   

namespace EmojiSharp
{
	public class Emoji
	{
		public string Name { get; set; }
        public string Unified { get; set; }
        public string[] Variations { get; set; }
        public string Docomo { get; set; }
        public string Au { get; set; }
        public string Softbank { get; set; }
        public string Google { get; set; }
        public string Image { get; set; }
        public int SheetX { get; set; }
        public int SheetY { get; set; }
        public string ShortName { get { return ShortNames != null && ShortNames.Length > 0 ? ShortNames[0] : null; }}
        public string[] ShortNames { get; set; }
        public string Text { get { return Texts != null && Texts.Length > 0 ? Texts[0] : null; }}
        public string[] Texts { get; set; }
        public string Category { get; set; }
        public int SortOrder { get; set; }
        public bool AppleHasImage { get; set; }
        public bool GoogleHasImage { get; set; }
        public bool TwitterHasImage { get; set; }
        public bool EmojioneHasImage { get; set; }

	<#
		JArray emojis = JArray.Parse(File.ReadAllText(Host.ResolvePath("emoji.json")));

		foreach (var entry in emojis)
		{
		    string cleanedName = entry["name"].Value<string>().Replace(' ', '_').Replace('-', '_').Trim();
			if (String.IsNullOrWhiteSpace(cleanedName)) { continue; }
		    
	#>
	public static readonly Emoji <#=cleanedName#> = new Emoji 
		{
			Name = "<#=entry["name"]#>",
			Unified = "<#=entry["name"]#>",
			Variations = <#=TokenToCsharpArray(entry["variations"])#>,
			Category = "<#=entry["category"]#>",
			SortOrder = 0,

			Docomo = "<#=entry["docomo"]#>",
			Au = "<#=entry["au"]#>",
			Softbank = "<#=entry["softbank"]#>",
			Google = "<#=entry["google"]#>",

			AppleHasImage = false,
			GoogleHasImage = false,
			TwitterHasImage = false,
			EmojioneHasImage = false,

			Image = "",
			SheetX = 0,
			SheetY = 0,

			ShortNames = <#=TokenToCsharpArray(entry["short_names"])#>,
			Texts = <#=TokenToCsharpArray(entry["texts"])#>
		};

	<#
		}
	#>
}
}

<#+
    public string TokenToCsharpArray(JToken token, bool includeCtor = true)
    {
        string result = 
			token.HasValues
            ? token.Select(d => '"' + d.Value<string>() + '"').Aggregate((cur, next) => cur + ", " + next)
            : EmptyString;

        if (includeCtor)
        {
			return "new string[] { " + result + " }";
        }

        return result;
    }

    public const string EmptyString = "\"\"";
#>